#include <SoftwareSerial.h>


// NEOPIXEL BEST PRACTICES for most reliable operation:
// - Add 1000 uF CAPACITOR between NeoPixel strip's + and - connections.
// - MINIMIZE WIRING LENGTH between microcontroller board and first pixel.
// - NeoPixel strip's DATA-IN should pass through a 300-500 OHM RESISTOR.
// - AVOID connecting NeoPixels on a LIVE CIRCUIT. If you must, ALWAYS
//   connect GROUND (-) first, then +, then data.
// - When using a 3.3V microcontroller with a 5V-powered NeoPixel strip,
//   a LOGIC-LEVEL CONVERTER on the data line is STRONGLY RECOMMENDED.
// (Skipping these may work OK on your workbench but can fail in the field)

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif
#include <FastLED.h>




/********************************************************************************************************************************/




SoftwareSerial miBT(11,10);

//Variable para leer el valor enviado desde la APP
char DATO = 0;

//PIN para intensidad del motor del patinete (Simulación LED Verde)
int MOTOR = 3;

//PINs para la gestión de relés
int MAESTRO = 2;
int ESCLAVO_1 = 8;
int ESCLAVO_2 = 9;
int WAITTIME = 1000;
bool adelante = true;

//Variables para niveles de intensidad
int INTENSIDAD_LOW = 75;
int INTENSIDAD_MEDIUM = 100;
int INTENSIDAD_HIGH = 250;
int INTENSIDAD_PARADA = 0;


// Variables para el control de los LEDS
bool carritoQuieto = true;
// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1:
#define LED_PIN    6

// How many NeoPixels are attached to the Arduino?
#define LED_COUNT 30

// Definición de variables cuando el carrito está en movimiento
// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);
// Argument 1 = Number of pixels in NeoPixel strip
// Argument 2 = Arduino pin number (most are valid)
// Argument 3 = Pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)

// Definición de variables cuando el carrito está quieto
#define UPDATES_PER_SECOND 30
#define BRIGHTNESS  64
#define LED_TYPE    WS2813
#define COLOR_ORDER GRB
CRGB leds[LED_COUNT];

CRGBPalette16 currentPalette;
TBlendType    currentBlending;


/********************************************************************************************************************************/


// Inicialización de Arduino
void setup() {
  delay( 3000 ); // power-up safety delay
  //Inicializamos el puerto serie de Arduino para usar el Serial Monitor
  Serial.begin(9600);
  Serial.println("Ready");
  
  //Inicializamos la comunicación en serie del dispositivo Bluetooth
  setupBluetooth();  

  // Inicializamos los pines de los relés y los desactivamos (High = desactivado)
  setupReles();

  // Inicializamos las luces LED
  setupLeds();
}



//Inicializamos la comunicación en serie del dispositivo Bluetooth
void setupBluetooth(){
  miBT.begin(9600);
  pinMode(MOTOR, OUTPUT);
}

// Inicializamos los pines de los relés y los desactivamos (High = desactivado)
void setupReles(){
  //Inicializamos los pintes para los relés
  pinMode(MAESTRO, OUTPUT);
  pinMode(ESCLAVO_1, OUTPUT);
  pinMode(ESCLAVO_2, OUTPUT);

  //Logica inversa para desactivar los relés por defecto. High = Desactivado - Low = Activado
  digitalWrite(MAESTRO, HIGH);
  digitalWrite(ESCLAVO_1, HIGH);
  digitalWrite(ESCLAVO_2, HIGH);
}



// Inicializamos las luces LED
void setupLeds(){

// Inicialización LEDS para cuando el carrito está en movimiento

  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
  #if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
    clock_prescale_set(clock_div_1);
  #endif
  // END of Trinket-specific code.

    strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
    strip.show();            // Turn OFF all pixels ASAP
    strip.setBrightness(50); // Set BRIGHTNESS to about 1/5 (max = 255)


// Inicialización LEDS para cuando carrito está parado
    FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, LED_COUNT).setCorrection( TypicalLEDStrip );
    FastLED.setBrightness(  BRIGHTNESS );
    
    currentPalette = RainbowColors_p;
    currentBlending = LINEARBLEND;
}





/********************************************************************************************************************************/









// función lood() -- se ejecuta repetidamente mientras la tarjeta Arduino esté encendida
void loop() {

  controlMotor();
  controlLed();
  //TEST BORRAR LUEGO
  //delay(10000);
  //DATO = 'D';
}


void controlMotor(){
  // Si recibimos algún dato desde el módulo Bluetooth escribimos en el monitor de Serie de Arduino
  if (miBT.available()){
    DATO = miBT.read();
    Serial.write(DATO);
    //Control de relé para cambio de dirección
    if(DATO == 'D'){
      //Indicaciones para cambiar dirección de motor hacia atrás
      if(adelante == true){
        digitalWrite(MAESTRO, LOW);
        delay(WAITTIME);
        digitalWrite(ESCLAVO_1, LOW);
        digitalWrite(ESCLAVO_2, LOW);
        delay(WAITTIME);
        digitalWrite(MAESTRO, HIGH);
        adelante = false;
      }else{
      //Indicaciones para cambiar dirección de motor hacia adelante
        digitalWrite(MAESTRO, LOW);
        delay(WAITTIME);
        digitalWrite(ESCLAVO_1, HIGH);
        digitalWrite(ESCLAVO_2, HIGH);
        delay(WAITTIME);
        digitalWrite(MAESTRO, HIGH);
        adelante = true;
      }
    }
    //Intensidad baja
    if(DATO == 'L'){
      Serial.write('1');
      analogWrite(MOTOR, INTENSIDAD_LOW);
      carritoQuieto = false; // para modificar las luces LED cuando está en movimiento
    }
    //Intensidad media
    if(DATO == 'M'){
      Serial.write('2');
      analogWrite(MOTOR, INTENSIDAD_MEDIUM);
      carritoQuieto = false; // para modificar las luces LED cuando está en movimiento
    }
    //Intensidad alta
    if(DATO == 'H'){
      Serial.write('3');
      analogWrite(MOTOR, INTENSIDAD_HIGH);
      carritoQuieto = false; // para modificar las luces LED cuando está en movimiento
    }
    //Detener carrito
    if(DATO == 'S'){
      Serial.write('3');
      analogWrite(MOTOR, INTENSIDAD_PARADA);
      //Para los relés de manera controlada
      digitalWrite(MAESTRO, LOW);
      delay(WAITTIME);
      digitalWrite(ESCLAVO_1, HIGH);
      digitalWrite(ESCLAVO_2, HIGH);
      delay(WAITTIME);
      digitalWrite(MAESTRO, HIGH);
      adelante = true;
      carritoQuieto = true; // para modificar las luces LED cuando está parado
    }
  }

  // Si recibimos algún dato desde el Serie de Arduino se envía al dispositibo Bluetooth
  if (Serial.available()){
    miBT.write(Serial.read());
  }

}


void controlLed(){
  Serial.println("Entra Arcoiris");
  if (carritoQuieto){
          //ChangePalettePeriodically();
    SetupBlackAndWhiteStripedPalette();
  }else{
    SetupSeveralColoursStripedPalette();
    /*
 // Fill along the length of the strip in various colors...
  colorWipe(strip.Color(255,   0,   0), 50); // Red
  colorWipe(strip.Color(  0, 255,   0), 50); // Green
  colorWipe(strip.Color(  0,   0, 255), 50); // Blue

  // Do a theater marquee effect in various colors...
  theaterChase(strip.Color(127, 127, 127), 50); // White, half brightness
  theaterChase(strip.Color(127,   0,   0), 50); // Red, half brightness
  theaterChase(strip.Color(  0,   0, 127), 50); // Blue, half brightness

  rainbow(10);             // Flowing rainbow cycle along the whole strip
  theaterChaseRainbow(50); // Rainbow-enhanced theaterChase variant*/
  }
  static uint8_t startIndex = 0;
    startIndex = startIndex + 15; /* motion speed */
    FillLEDsFromPaletteColors(startIndex);
    FastLED.show();
    FastLED.delay(1000 / UPDATES_PER_SECOND);

  Serial.println("SALE Arcoiris");
}


void SetupBlackAndWhiteStripedPalette()
{
    // 'black out' todas las 16 entradas de palette
    fill_solid( currentPalette, 16, CRGB::Black);
    currentPalette[8] = CRGB::White;
    currentPalette[11] = CRGB::White;
}


void SetupSeveralColoursStripedPalette()
{
    // 'black out' todas las 16 entradas de palette
    fill_solid( currentPalette, 16, CRGB::Black);
    switch(random(10)){
      case 0:
        currentPalette[8] = CRGB::Red;
        currentPalette[11] = CRGB::Turquoise;
        break;
      case 1:
        currentPalette[8] = CRGB::Amethyst;
        currentPalette[11] = CRGB::AliceBlue;
        break;
      case 2:
        currentPalette[8] = CRGB::Aqua;
        currentPalette[11] = CRGB::Silver;
        break;
      case 3:
        currentPalette[8] = CRGB::Gold;
        currentPalette[11] = CRGB::Blue;
        break;
      case 4:
        currentPalette[8] = CRGB::Orange;
        currentPalette[11] = CRGB::DarkSalmon ;
        break;
      case 5:
        currentPalette[8] = CRGB::Red;
        currentPalette[11] = CRGB::OliveDrab;
        break;
      case 6:
        currentPalette[8] = CRGB::Thistle;
        currentPalette[11] = CRGB::Violet;
        break;
      case 7:
        currentPalette[8] = CRGB::YellowGreen ;
        currentPalette[11] = CRGB::PaleGreen ;
        break;
      case 8:
        currentPalette[8] = CRGB::Red;
        currentPalette[11] = CRGB::Blue;
        break;
      case 9:
        currentPalette[8] = CRGB::LightCyan ;
        currentPalette[11] = CRGB::Fuchsia ;
        break;
      case 10:
        currentPalette[8] = CRGB::Magenta;
        currentPalette[11] = CRGB::DeepPink ;
        break;
    }
    
}



void FillLEDsFromPaletteColors( uint8_t colorIndex)
{
    uint8_t brightness = 255;
    for( int i = 0; i < LED_COUNT; i++) {
        leds[i] = ColorFromPalette( currentPalette, colorIndex, brightness, currentBlending);
        colorIndex += 3;
    }
}

// Some functions of our own for creating animated LEDS effects -----------------

// Fill strip pixels one after another with a color. Strip is NOT cleared
// first; anything there will be covered pixel by pixel. Pass in color
// (as a single 'packed' 32-bit value, which you can get by calling
// strip.Color(red, green, blue) as shown in the loop() function above),
// and a delay time (in milliseconds) between pixels.
void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

// Theater-marquee-style chasing lights. Pass in a color (32-bit value,
// a la strip.Color(r,g,b) as mentioned above), and a delay time (in ms)
// between frames.
void theaterChase(uint32_t color, int wait) {
  for(int a=0; a<10; a++) {  // Repeat 10 times...
    for(int b=0; b<3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      // 'c' counts up from 'b' to end of strip in steps of 3...
      for(int c=b; c<strip.numPixels(); c += 3) {
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show(); // Update strip with new contents
      delay(wait);  // Pause for a moment
    }
  }
}

// Rainbow cycle along whole strip. Pass delay time (in ms) between frames.
void rainbow(int wait) {
  // Hue of first pixel runs 5 complete loops through the color wheel.
  // Color wheel has a range of 65536 but it's OK if we roll over, so
  // just count from 0 to 5*65536. Adding 256 to firstPixelHue each time
  // means we'll make 5*65536/256 = 1280 passes through this loop:
  for(long firstPixelHue = 0; firstPixelHue < 5*65536; firstPixelHue += 256) {
    // strip.rainbow() can take a single argument (first pixel hue) or
    // optionally a few extras: number of rainbow repetitions (default 1),
    // saturation and value (brightness) (both 0-255, similar to the
    // ColorHSV() function, default 255), and a true/false flag for whether
    // to apply gamma correction to provide 'truer' colors (default true).
    strip.rainbow(firstPixelHue);
    // Above line is equivalent to:
    // strip.rainbow(firstPixelHue, 1, 255, 255, true);
    strip.show(); // Update strip with new contents
    delay(wait);  // Pause for a moment
  }
}

// Rainbow-enhanced theater marquee. Pass delay time (in ms) between frames.
void theaterChaseRainbow(int wait) {
  int firstPixelHue = 0;     // First pixel starts at red (hue 0)
  for(int a=0; a<30; a++) {  // Repeat 30 times...
    for(int b=0; b<3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      // 'c' counts up from 'b' to end of strip in increments of 3...
      for(int c=b; c<strip.numPixels(); c += 3) {
        // hue of pixel 'c' is offset by an amount to make one full
        // revolution of the color wheel (range 65536) along the length
        // of the strip (strip.numPixels() steps):
        int      hue   = firstPixelHue + c * 65536L / strip.numPixels();
        uint32_t color = strip.gamma32(strip.ColorHSV(hue)); // hue -> RGB
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show();                // Update strip with new contents
      delay(wait);                 // Pause for a moment
      firstPixelHue += 65536 / 90; // One cycle of color wheel over 90 frames
    }
  }
}
